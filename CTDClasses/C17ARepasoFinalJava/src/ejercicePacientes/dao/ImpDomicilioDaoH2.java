package ejercicePacientes.dao;

import ejercicePacientes.entities.Domicilio;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class ImpDomicilioDaoH2 implements IDao<Domicilio>{

    private final static String DB_JDBC_DRIVER = "org.h2.Driver";
    //con la instruccion INIT = RUNSCRIPT cuando se conencta a la base ejecuta el script de sql que esta en dicho archivo
    private final static String DB_URL =  "jdbc:h2:~/db_clinica;INIT=RUNSCRIPT from 'create.sql'";
    private final static String DB_USER ="sa";
    private final static String DB_PASSWORD = "";

    Connection connection = null;
    PreparedStatement preparedStatement = null;

    public void getConnection() throws Exception{
        Class.forName(DB_JDBC_DRIVER);
        connection = DriverManager.getConnection(DB_URL,DB_USER,DB_PASSWORD);
    }


    @Override
    public Domicilio save(Domicilio domicilio) {

        try{
            //1- Levantar el Driver y Conectarnos
            getConnection();

            //2- Crear la sentencia con ID autoincremental
            preparedStatement = connection.prepareStatement("INSERT INTO domicilio(calle,numero,localidad,provincia) VALUES(?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
            //No le vamos a psar el ID ya que hicimos que sea autoincremental en la base de datos
            //preparedStatement.sentLong(1, domicilio.getId());
            preparedStatement.setString(1, domicilio.getCalle());
            preparedStatement.setString(2, domicilio.getNumero());
            preparedStatement.setString(3,domicilio.getLocalidad());
            preparedStatement.setString(4,domicilio.getProvincia());

            // 3---Ejecutar una sentencia SQL y obtener los ID que se autogeneraron en la base de datos
            preparedStatement.executeUpdate();
            ResultSet keys = preparedStatement.getGeneratedKeys();//ResultSet object containing the auto-generated key(s) generated by the execution of this Statement object
            if (keys.next()){
                domicilio.setId(keys.getLong(1));
            }

            preparedStatement.close();

        }catch (SQLException | ClassNotFoundException exception){
            exception.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return domicilio;
    }

    @Override
    public Domicilio findById(Long id) {

        Domicilio domicilio = null;

        try{
            //1 Levantar el driver y Conectarnos
            getConnection();

            //2 Creamos la sentencia
            preparedStatement = connection.prepareStatement("SELECT * FROM domicilio WHERE id = ?");
            preparedStatement.setLong(1, id);

            //3 Ejecutar la sentencia SQL
            ResultSet res = preparedStatement.executeQuery();

            //Obtener resultados
            while(res.next()){
                //Long idDomicilio = res.getLong("id");
                String calle = res.getString("calle");
                String numero = res.getString("numero");
                String localidad = res.getString("localidad");
                String provincia = res.getString("provincia");

                domicilio = new Domicilio( calle, numero, localidad, provincia);
            }

            preparedStatement.close();

        }catch (SQLException | ClassNotFoundException throwables){
            throwables.printStackTrace();
        }catch (Exception e){
            e.printStackTrace();
        }
        return domicilio;
    }

    @Override
    public void deleteById(Long id) {

        try {
            //1 Levantar el driver y Conectarnos
            getConnection();

            //2 Crear una sentencia
            preparedStatement = connection.prepareStatement("DELETE FROM domicilio where id = ?");
            preparedStatement.setLong(1,id);

            //3 Ejecutar una sentencia SQL
            preparedStatement.executeUpdate();
            System.out.println("eliminando domicilio");
            preparedStatement.close();

        } catch (SQLException | ClassNotFoundException throwables) {
            throwables.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    @Override
    public List<Domicilio> findAll() {

        List<Domicilio> domicilioList = new ArrayList<>();

        try{
            //1 Levantar el driver y Conectarnos
            getConnection();

            //2 Creamos la sentencia
            preparedStatement = connection.prepareStatement("SELECT * FROM domicilio");

            //3 Ejecutar la sentencia SQL
            ResultSet res = preparedStatement.executeQuery();

            //Obtener resultados
            while(res.next()){
                Domicilio domicilio = null;
                //Long idDomicilio = res.getLong("id");
                String calle = res.getString("calle");
                String numero = res.getString("numero");
                String localidad = res.getString("localidad");
                String provincia = res.getString("provincia");

                domicilio = new Domicilio(calle, numero, localidad, provincia);
                domicilioList.add(domicilio);
            }

            preparedStatement.close();

        }catch (SQLException | ClassNotFoundException throwables){
            throwables.printStackTrace();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return domicilioList;
    }
}
